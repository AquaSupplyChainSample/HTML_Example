pipeline {
  agent any
  stages {
   stage('Build') {
      steps {
        sh 'docker build -t darinpope/java-web-app:latest .'
      }
    }
    stage('Aqua scanner') {
      agent {
        docker {
          image 'aquasec/aqua-scanner'
        }
      }
      steps {
        withCredentials([
          string(credentialsId: 'AQUA_KEY', variable: 'AQUA_KEY'),
          string(credentialsId: 'AQUA_SECRET', variable: 'AQUA_SECRET'),
          string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')
        ]){
          sh '''
            export TRIVY_RUN_AS_PLUGIN=aqua
            trivy fs --sast --security-checks config,vuln,secret --output 'scss_cve_report.html'
            # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
            # To enable SAST scanning, add: --sast
            # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
          '''
        }
      }
    }
  }
  post {
  always {
          archiveArtifacts artifacts: "scss_cve_report", fingerprint: true
          publishHTML (target: [
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: '.',
            reportFiles: 'scss_cve_report.html',
            reportName: 'Trivy CVE Report'
            ])
          }
        } 
  }
